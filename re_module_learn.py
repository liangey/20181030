#Author:ley
# --*-- coding: utf-8 --*--
#@Time : 2018-12-06 14:39
#@Author: ley
#@Site : 
#@File : re_module_learn.py
#@Software : PyCharm

import re
#从开始位置匹配，如果开头没有则无
re.match()
#搜索整个字符串
re.search()
#搜索整个字符串，返回一个list
re.findall()

#r(raw)用在pattern之前，表示单引号中的字符串为原生字符，不会进行任何转义
re.match(r'l','liyuan1').group()   #返回1
re.match(r'y','liyuan') #返回0
re.search(r'y','liyuan1').group() #返回1


#正则表达式可以包含一些可选标志修饰符来控制匹配的模式。
# 修饰符被指定为一个可选的标志。
# 多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：

''''
re.I	使匹配对大小写不敏感
re.L	做本地化识别（locale-aware）匹配
re.M	多行匹配，影响 ^ 和 $
re.S	使 . 匹配包括换行在内的所有字符
re.U	根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
re.X	该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。
'''

re.search(r'[a-z]+','liuyaN1234ab9').group() #返回liuya
re.search(r'[a-z]+','liuyaN1234ab9',re.I).group() #返回'liuyaN'，对大小写不敏感

#如果匹配成功,则打印m,否则返回Null
if re.match(r'[0-9]','a'):print('m')

#用空格分割
re.split(r'\s+','ab c')
#返回：['a', 'b', 'c', 'd']

#用逗号分隔
re.split(r'[\s\,]+','ab c')
#返回：['a', 'b', 'c', 'd']

'''
模式	描述
^	匹配字符串的开头
$	匹配字符串的末尾。
.	匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。
[...]	用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
[^...]	不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。
re*	匹配0个或多个的表达式。
re+	匹配1个或多个的表达式。
re?	匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式
re{ n}	 
re{ n,}	精确匹配n个前面表达式。
re{ n, m}	匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式
a| b	匹配a或b
(re)	G匹配括号内的表达式，也表示一个组
(?imx)	正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。
(?-imx)	正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。
(?: re)	类似 (...), 但是不表示一个组
(?imx: re)	在括号中使用i, m, 或 x 可选标志
(?-imx: re)	在括号中不使用i, m, 或 x 可选标志
(?#...)	注释.
(?= re)	前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。
(?! re)	前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功
(?> re)	匹配的独立模式，省去回溯。
\w	匹配字母数字
\W	匹配非字母数字
\s	匹配任意空白字符，等价于 [\t\n\r\f].
\S	匹配任意非空字符
\d	匹配任意数字，等价于 [0-9].
\D	匹配任意非数字
\A	匹配字符串开始
\Z	匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c
\z	匹配字符串结束
\G	匹配最后匹配完成的位置。
\b	匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。
\B	匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。
\n, \t, 等.	匹配一个换行符。匹配一个制表符。等
\1...\9	匹配第n个分组的子表达式。
\10	匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式
--------------------- 
'''


'''
正则表达式实例

字符匹配

实例	描述
python	匹配 "python".
字符类

实例	描述
[Pp]ython	匹配 "Python" 或 "python"
rub[ye]	匹配 "ruby" 或 "rube"
[aeiou]	匹配中括号内的任意一个字母
[0-9]	匹配任何数字。类似于 [0123456789]
[a-z]	匹配任何小写字母
[A-Z]	匹配任何大写字母
[a-zA-Z0-9]	匹配任何字母及数字
[^aeiou]	除了aeiou字母以外的所有字符
[^0-9]	匹配除了数字外的字符
特殊字符类

实例	描述
.	匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。
\d	匹配一个数字字符。等价于 [0-9]。
\D	匹配一个非数字字符。等价于 [^0-9]。
\s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
\S	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\w	匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。
\W	匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。
--------------------- 
'''

'''
为什么要用 r’ ..‘ 字符串（ raw 字符串）？
由于正则式的规则也是由一个字符串定义的，
而在正则式中大量使用转义字符 ’/’ ，
如果不用 raw 字符串，则在需要写一个 ’/’ 的地方，
你必须得写成 ’//’, 那么在要从目标字符串中匹配一个 ’/’ 的时候，
你就得写上 4 个 ’/’ 成为 ’////’ ！
这当然很麻烦，也不直观，所以一般都使用 r’’ 来定义规则字符串。
当然，某些情况下，可能不用 raw 字符串比较好
--------------------- 
'''